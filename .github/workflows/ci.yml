name: Container CI/CD

# Controls when the action will run. 
on:
  push:
     paths:
       - 'docker-images/**'
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  check-updated-components:
    name: Check component updates
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.filter.outputs.changes }}
      is_none_of_updates: ${{ steps.check.outputs.is_none_of_updates }}
    steps:
      - uses: actions/checkout@v2

      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            export-model:
              - 'docker-images/export-model/**'
            init-workflow:
              - 'docker-images/init-workflow/**'
            mfa-align:
              - 'docker-images/mfa-align/**'
            runtime:
              - 'docker-images/runtime/**'
            torchserve:
              - 'docker-images/torchserve/**'

      - name: Check updated component is empty
        id: check
        env:
          UPDATED: ${{ steps.filter.outputs.changes }}
        run: |
          echo UPDATED: $UPDATED
          if [ "[]" == "$UPDATED" ]; then echo "::set-output name=is_none_of_updates::true"
          else echo "::set-output name=is_none_of_updates::false"
          fi

  build-push:
    name: Build and push the image
    runs-on: ubuntu-latest

    needs: check-updated-components
    if: ${{ needs.check-updated-components.outputs.is_none_of_updates == 'false' }}
    strategy:
      matrix:
        package: ${{ fromJSON(needs.check-updated-components.outputs.packages) }}

    env:
      IMAGE_PREFIX: fs2

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository
      - uses: actions/checkout@v2

      # setup docker environment
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      # build and push the component image
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ./components/${{ matrix.package }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_PREFIX }}-${{ matrix.package }}:latest
